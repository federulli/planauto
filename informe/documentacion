PrepararAmbiente

* Si el ambiente ya esta inicializado, imprime en pantalla y loguea error.
* Para verificar la integridad de la instalacion, el script lee del archivo de configuracion un BINFILES y MAEFILES que contiene el nombre de todos los scripts y los archivos maestros necesarios para la correcta ejecucion.
* Se verifica que los archivos maestros tengan permiso de lectrua y los archivos en la carpeta binarios tengan permisos de ejecucion. si no los tienen los cambia, si no se pueden cambiar imprime un error en pantalla sin loguear nada y termina la ejecucion.

LanzarProceso

* Posee 2 parametros el primero indica el nombre del script a ejecutar solo se deve pasar el nombre, el script buscara el ejecutable con el nombre psado por parametro en la carpeta binarios, el segundo parametro indica si el script sera ejecutado en BACKGRAUND ( "B" ) o FOREGRAUND ( "F" )
* Antes de ejecutar el nuevo script se verifica que no este actualemente siendo ejecutado y que el ambiente este inicializado.


DetenerProceso

* Detiene la ejecucion del proceso pasado por parametro, por parametro se pasa solo el nombre con o sin extension sin ruta.

MoverArchivos

* El primer parametro es el origien, el segundo el destino y el tercero ( opcional ) el nombre del parametro en el que va a loguear.
* Si no se pasa el nombre del parametro se logea en el log de MoverArchivo.
* En destino puede no pasarse  un nombre para el archivo por lo que se usara el nombre del archivo origen.
* El nombre de archivo duplicado se define juntando el nombre del archivo mas un numero incremental que va desde el 0 hasta que sea unico.

RecibirOfertas

* Recibe del script que lo invoca la accion a realizar. Es decir, al ser un demonio, se le debe explicitar si debe iniciarse (start) o detenerse (stop). Estas acciones se realizan de forma automatica al ejecutarlo o detenerlo utilizando "LanzarProceso.sh" o "DetenerProceso.sh", no requiere una accion extra por parte del usuario.
* Al iniciar crea una lista de concesionarios en base al archivo maestro "concesionarios.csv" para validar que el nombre del archivo a procesar contenga un nombre de concesionario existente.
* Valida la extension y el nombre de los archivos que se encuentran en la carpeta "Arribados", todos los archivos que no cumplan con los requisitos se mueven a la carpeta de "Rechazados"
* Se valida que la fecha del nombre del archivo a procesar sea una fecha valida. Aprovechando que el acto de adjudicación se realiza todos los meses, se validan las fechas de los archivos a procesar comparando este valor con la fecha de adjudicación del mes anterior al actual del sistema. Además, la fecha leida en el nombre del archivo se valida que sea menor o igual a la fecha del sistema.
* El script se ejcuta indefinidamente luego de dormirse según el valor seteado en la configuración del sistema (generar_config.sh)
* Luego de recorrer los archivos "Arribados", verifica que no haya novedades pendientes (es decir, archivos aceptados que deben ser procesados). En caso de que haya archivos aceptados y el script procesarOfertas.sh no se encuentre en ejecución, se ejecuta dicho script en background para que RecibirOfertas.sh no deje de ejecutarse ciclicamente. Si procesarOfertas.sh se encuentra en ejecución, se suspende su lanzamiento y se pospone para el proximo ciclo.

ProcesarOfertas

* Al iniciar verifica que todos los directorios necesarios para su funcionamiento sean validos y existan.
* Procesa los archivos que fueron aceptados por recibirOfertas.sh en orden creciente segun su fecha, haciendo uso de un indice creado mediante otro script (indiceAceptados.pl).
* Se verifica que un fichero no haya sido procesado anteriormente buscando su concidencia en nombre en la carpeta "Procesadas/Procesadas". En caso de encontrarse, se mueve el fichero en espera de ser procesado a la carpeta de "Rechazados"
* Se valida que todos los registros del archivo a procesar sean validas, es decir, que cumplan con la estructura pedida. Caso contrario se rechazan. (Se hace mas robusto que lo pedido, que era solo validar la primera linea) Los archivos que no cumplen, se mueven al directorio de rechazados.
* Se valida que el estado de grupo a procesar sea distinto a CERRADO, utilizando el archivo maestro "grupos.csv" para contrastar esta información.
* Se valida que el contrato fusionado (grupo y numero de orden) exista en el padron de suscriptores (informacion obtenida del archivo maestro "temaL_padron.csv")
* Se valida que se cumplan las condiciones de monto minimo y maximo establecidas para poder ofertar.
* Por último se valida que el suscriptor pueda participar del acto de adjudicación.
*  Los registros verificados se guardan en un archivo de texto plano (.txt) dentro de la carpeta "/procesados/validas" con el nombre de la proxima fecha de adjudicación. Guardando además la información establecida en la tabla de válidas del trabajo práctico.
* Los registros rechazados se guardan en un archivo de texto plano (.rech) dentro de la carpeta "/procesados/rechazadas" con el nombre del concesionario al que pertenece el registro rechazado.
* Por último se mueve el archivo procesado a "procesados/procesadas" para evitar que se procese en el proximo ciclo o llamada del script.

* Se valida si un suscriptor ya posee una oferta valida procesada. En caso de no encontrarse su nombre en el archivo de suscriptores "/maestros/SuscriptoresProcesados.csv" (Archivo que se crea al ejecutar este script) la oferta se valida, caso contrario, se la rechaza aun cuando cumpla los otros requisitos. La hipotesis adoptada es que solo se valida la primer oferta encontrada para un suscriptor, cualquier otra oferta sera rechazada sin importar el importe ofertado.

GenerarSorteo

* Verifica la existencia del archivo maestro "FechasAdj.csv" y verifica que el archivo no esté vacío. En caso de no existir el archivo, el archivo pasado por parametro no sea el correcto o el archivo "FechasAdj.csv" se encuentre vacío el script graba el log en el error y aborta su ejecución.
* Verifica la existencia de las carpetas "$GRUPO/procesados" y "$GRUPO/procesados/sorteos" en caso de no existir alguna o ninguna las crea
* Superadas todas las validaciones se busca en el archivo "FechasAdj.csv" cual es la próxima fecha de adjudicación. El script toma en cuenta la fecha del sistema para determinar cuál es la próxima fecha de adjudicación. 
* En el caso de que en el archivo "FechasAdj.csv" se encuentran fechas invalidas como 30 de Febrero estás se descartan y se informa con un warning en el log
* En el caso de que todas las fechas de adjudicación del archivo "FechasAdj.csv" sean anteriores a la fecha del sistema al momento de realizar el sorteo se informa el error en el log y el script aborta su ejecución
* Una vez determinada la fecha correspondiente al próximo acto de adjudicación se genera un archivo de nombre "<id>_<fecha_de_adjudicacion>.srt" donde <id> es un identificar númerico para determinar el orden en que se realizaron los sorteos y <fecha_de_adjudicacion> es la fecha del próximo acto de adjudiación con formato "aaaammdd"
* Luego se realiza el sorteo asignando a cada uno de 168 números de orden un número entre 1 y 168 en forma aleatoria.
* Finalmente se graban los registros en el archivo de sorteos terminada esta operación se informa en el log la finalizacion del sorteo.

MostrarBitacora

Parametro 1 : comando
Parametro 2 (opcional) : string a buscar
Parametro 3 (opcional) : donde buscar la string (usuario, fecha, comando, typo, mensaje)

* Verifica si hay a menos un parametro.
* Verifica si el archivo deseado existe.
* Si solo hay un parametro muestra todo el archivo.
* Si hay dos parametros muestra solo las bitacoras que contienen el segundo parametro.
* Si hay tres parametros muestra solo las bitacoras que contienen el segundo parametro en el campo indicado por el tercero parametro.

Comandos Auxiliares:
IndiceAceptados.pl
* Lee los archivos que se encuentran en la carpeta de "Aceptados" y devuelve un índice ordenado por la fecha según el nombre de cada uno de los archivos.

Determinar Ganadores

*Puede recibir n parámetro, el primero debe ser el id del sorteo.
*Recibe todos los grupos por los que se desea consultar por parámetro.
*Recibe la opción -a para ayuda y -g para guardar los resultados de las consultas.
*No se ejecuta si el ambiente no fue inicializado, existe otro comando de DeterminarGanadores en ejcución o no existe el archivo del sorteo recibido por parametro.
*Permite hacer consultas sobre los ganadores de los sorteos y licitaciones, para los grupos deseados.
*Se pueden realizar tantas consultas como se desee sin salir del comando.


